[
  {
    "objectID": "thesis/index.html#example",
    "href": "thesis/index.html#example",
    "title": "Thesis defence",
    "section": "Example",
    "text": "Example\nSome text."
  },
  {
    "objectID": "2024-cmb-france-6/index.html#outline",
    "href": "2024-cmb-france-6/index.html#outline",
    "title": "",
    "section": "Outline",
    "text": "Outline\n\nMotivations and goals: why and for what?\nPresentation of the framework\nApplications in CMB science"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#motivations-and-goals",
    "href": "2024-cmb-france-6/index.html#motivations-and-goals",
    "title": "",
    "section": "Motivations and Goals",
    "text": "Motivations and Goals\n\nInverse problems: assuming data \\(d_{obs} = F(p)\\), find the parameters \\(p\\)\nPure Python, open source: https://github.com/CMBSciPol/furax\n\npip install furax (work in progress!)\n\nModular & extensible: Easy to experiment new ideas\nHigh-performance: JAX (see next slide)\n\n\n\n\nMaximum likelihood and template map-making as in El Bouhargani et al. 2021\nNon-ideal, frequency-dependent optical components\nProvide tools for next generation experiments (SO, CMB-S4, LiteBIRD)\n\nInterfaces with TOAST, sotodlib\nLarge data sets: multi-GPU parallelization is underway"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#what-is-jax",
    "href": "2024-cmb-france-6/index.html#what-is-jax",
    "title": "",
    "section": "What is JAX",
    "text": "What is JAX\nFrom the JAX website:\n\nJAX is a library for array-oriented numerical computation (à la NumPy), with automatic differentiation and JIT compilation to enable high-performance machine learning research.\n\nKey features\n\nNumPy-like interface with CPU/GPU/TPU support in local and distributed environments\nJust-in-time (JIT) compilation via Open XLA\nAutomatic differentiation\nAutomatic vectorization"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#pytrees",
    "href": "2024-cmb-france-6/index.html#pytrees",
    "title": "",
    "section": "PyTrees",
    "text": "PyTrees\nFURAX relies on PyTrees to represent the data.\n\nExample: random sky with 3 components\nsky = {\n  'cmb': HealpixLandscape(nside, 'IQU').normal(key1),\n  'dust': HealpixLandscape(nside, 'IQU').normal(key2),\n  'synchrotron': HealpixLandscape(nside, 'IQU').normal(key3),\n}\nHealpixLandscape(nside, 'IQU') returns an instance of StokesIQUPyTree, a container for the Stokes parameters I, Q, U.\n\n\nUse FrequencyLandscape to generalize to multiple frequencies.\nfrequencies = np.array([93, 145])\nsky = {\n  'cmb': FrequencyLandscape(nside, frequencies, 'IQU').normal(key1),\n  'dust': FrequencyLandscape(nside, frequencies, 'IQU').normal(key2),\n  'synchrotron': FrequencyLandscape(nside, frequencies, 'IQU').normal(key3),\n}"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#operators",
    "href": "2024-cmb-france-6/index.html#operators",
    "title": "",
    "section": "Operators",
    "text": "Operators\nThe base class AbstractLinearOperator provides a default implementation for the usual linear algebra operations.\n\n\n\n\n\n\n\n\n\nOperation\nFURAX\nComment\n\n\n\n\nAddition\nA + B\n\n\n\nComposition\nA @ B\n\n\n\nMultiplication by scalar\nk * A\nReturns the composition of a HomothetyOperator and A\n\n\nTranspose\nA.T\nThrough JAX autodiff, but can be overriden\n\n\nInverse\nA.I\nBy default, the CG solver is used, but it can be overriden or configured using a context manager\n\n\nBlock Assembly\nBlockColumnOperator([A, B]) BlockDiagonalOperator([A, B]) BlockRowOperator([A, B])\nHandle any PyTree of Operators: Block*Operator({'a': A, 'b': B})\n\n\nFlattened dense matrix\nA.as_matrix()\n\n\n\nAlgebraic reduction\nA.reduce()"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#operators-contd",
    "href": "2024-cmb-france-6/index.html#operators-contd",
    "title": "",
    "section": "Operators (cont’d)",
    "text": "Operators (cont’d)\n\n\n\n\n\n\n\n\n\n\n\nGeneric Operator\nDescription\n\n\n\n\nIdentityOperator\n\n\n\nHomothetyOperator\n\n\n\nDiagonalOperator\n\n\n\nBroadcastDiagonalOperator\nNon-square operator for broadcasting\n\n\nTensorOperator\nFor dense matrix operations\n\n\nIndexOperator\nCan be used for projecting skies onto time-ordered series\n\n\nMoveAxisOperator\n\n\n\nReshapeOperator\n\n\n\nRavelOperator\n\n\n\nSymmetricBandToeplitzOperator\nMethods: direct, FFT, overlap and save\n\n\nBlock*Operator\nBlock assembly operators (column, diagonal, row)\n\n\n\n\n\n\n\n\n\n\n\nApplied Operator\nDescription\n\n\n\n\nQURotationOperator\n\n\n\nHWPOperator\nIdeal HWP\n\n\nLinearPolarizerOperator\nIdeal linear polarizer\n\n\nCMBOperator\nParametrized CMB SED\n\n\nDustOperator\nParametrized dust SED\n\n\nSynchrotronOperator\nParametrized synchrotron SED"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#algebraic-reductions-rotations",
    "href": "2024-cmb-france-6/index.html#algebraic-reductions-rotations",
    "title": "",
    "section": "Algebraic reductions: Rotations",
    "text": "Algebraic reductions: Rotations\nClassic acquisition model with ideal linear polarizer \\(\\mathbf{M}_{\\textrm{LP}}\\), ideal half wave plate \\(\\mathbf{M}_{\\textrm{HWP}}\\), rotations \\(\\mathbf{R}\\), pointing matrix \\(\\mathbf P\\):\n\\[\n\\mathbf{H} = \\mathbf{M}_{\\textrm{LP}} \\, \\mathbf{R}_{2\\theta} \\, \\mathbf{R}_{-2\\phi} \\,\n\\mathbf{M}_{\\textrm{HWP}} \\, \\mathbf{R}_{2\\phi} \\, \\mathbf{R}_{2\\psi} \\, \\mathbf{P}\n\\]\nwhere\n\n\\(\\theta\\): polarizer angle\n\\(\\phi\\): half-wave plate angle\n\\(\\psi\\): telescope angle\n\nis reduced automatically to the much simpler\n\\[\n\\mathbf{H} = \\mathbf{M}_{\\textrm{LP}} \\, \\mathbf{R}_{-2\\theta + 4\\phi + 2\\psi}\\, \\mathbf{P}\n\\]"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#cmb-applications",
    "href": "2024-cmb-france-6/index.html#cmb-applications",
    "title": "",
    "section": "CMB Applications",
    "text": "CMB Applications\n\n Credits: Ema Tsang, Wassim Kabalan, Amalia Villarrubia & the whole SciPol team"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#generalized-map-making",
    "href": "2024-cmb-france-6/index.html#generalized-map-making",
    "title": "",
    "section": "Generalized Map-Making",
    "text": "Generalized Map-Making\n\n\n\nClassic data model\n\\[\nd = \\mathbf{P}s + n\n\\]\n\n\\(d\\): time-ordered data\n\\(\\mathbf{P}\\): pointing matrix (telescope scanning)\n\\(s\\): discretized sky signal\n\\(n\\): stochastic contribution (noise)\n\n\nOptimal (GLS) solution\n\\[\n\\widehat{s} = (\\mathbf{P}^\\top \\mathbf{N}^{-1} \\mathbf{P})^{-1} \\mathbf{P}^\\top \\mathbf{N}^{-1} d\n\\]\n\n\nGeneralized parametric data model\n\n\n\n\n\n\\[\nd_{\\nu, i, t} = \\int_{\\textrm{BP}_\\nu} d\\nu' \\mathbf{M}^{(\\gamma)}_{\\nu', i, t, p} \\mathbf{A}^{(\\beta)}_{\\nu', t, c, p} s_{c, p} + n_{\\nu, i, t}\n\\]\n\n\\(\\mathbf{M}\\): instrument matrix (pointing, HWP parameters, bandpasses, beam properties, etc.)\n\\(\\mathbf{A}\\): mixing matrix (modeling of CMB, astrophysical foregrounds, atmosphere, etc.)\n\\(\\mathbf{H} = \\mathbf{MA}\\) is the generalized pointing operator"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#time-domain-noise-correlations",
    "href": "2024-cmb-france-6/index.html#time-domain-noise-correlations",
    "title": "",
    "section": "Time-domain noise correlations",
    "text": "Time-domain noise correlations\n\n\nNoise correlations in a stationary period correspond to a symmetric Toeplitz matrix structure.\nSymmetricBandToeplitzOperator with optimized matrix-vector operations in \\(\\mathcal O(n \\log \\lambda)\\) (overlap-and-save method).\n\n\n\n\nImpact of gaps. Credits: B3DCMB\n\n\n\n\n\nRestoring stationarity\nTo work around this problem, one solution is to fill the gaps with synthetic samples consistent with noise.\nFurax’s GapFillingOperator computes a constrained noise realization from an estimate of the noise correlations.\n\n\n\n\n\nToy example. Only gaps are modified."
  },
  {
    "objectID": "2024-cmb-france-6/index.html#non-ideal-hwp",
    "href": "2024-cmb-france-6/index.html#non-ideal-hwp",
    "title": "",
    "section": "Non-Ideal HWP",
    "text": "Non-Ideal HWP\n\n\n\nRealistic HWP operator\n\nseveral layers stacked\ntransmission + reflection of incident EM field at the boundaries\n\nCf. great presentation by Miguel Gomes yesterday!\n\n\n\n\nMueller matrix coefficients in angle-frequency space for the SO mid-frequency SAT\n\n\n\n\n\nfrequency-dependent phase shift (middle blocks)\nI-&gt;P leakage at ~0.4% (IQ, IU blocks)\nalso 2f but not very visible\n\n\n\n\nCredit: Ema Tsang"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#component-separation",
    "href": "2024-cmb-france-6/index.html#component-separation",
    "title": "",
    "section": "Component separation",
    "text": "Component separation\n\n\ntldr: Does everything fgbuster does, but better\n\nFurax operators efficiently represent the mixing matrix\nhardware accelerated\neasy access to gradients and hessians\n\nBeyond fgbuster\n\nAutomatic cluster detection for spectral index parameters\nVery flexible model: straight-forward extensions to other sky components, different objective functions, etc.\n\n\n\nCost of evaluating the likelihood function is reduced by a factor 10 for \\(\\textrm{nside} \\geq 64\\). \n\n\nThis will power the map-based pipeline for \\(r\\) estimation in SO (cf. presentation by Baptiste Jost earlier today).\n\n\n\n\nCredit: Wassim Kabalan"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#atmosphere-decontamination-time-domain-component-separation",
    "href": "2024-cmb-france-6/index.html#atmosphere-decontamination-time-domain-component-separation",
    "title": "",
    "section": "Atmosphere decontamination: time-domain component separation",
    "text": "Atmosphere decontamination: time-domain component separation\nGoal: For the Simons Observatory, characterize the observed atmospheric template from the recorded time-ordered data to separate the atmosphere from the sky signal we are after.\n\n\nDetector array scanning the sky (signal has arbitrary units)\n\n\n\n\n\n\nData Model\n\\[\nd_{\\text{atm}} = \\mathbf{A}(\\text{pwv}) \\mathbf{P}(\\vec{w}) s_{\\text{atm}} + n\n\\]\nwith parameters:\n\nWind velocity: \\(\\vec{w} = (w_x, w_y)\\)\nPrecipitable Water Vapour (PWV): ~Amplitude of atmospheric fluctuations.\n\nEstimate parameters by minimizing the spectral likelihood.\n\\[\n\\boxed{\n\\langle \\delta \\mathcal{S}_\\text{spec}(\\vec{w}, \\text{pwv} \\mid d_{\\text{atm}}) \\rangle\n= d_{\\text{atm}}^\\top \\cdot \\mathbf{AP}\n\\Big[ (\\mathbf{AP})^\\top \\mathbf{N}^{-1} (\\mathbf{AP}) \\Big]^{-1}\n(\\mathbf{AP})^\\top \\mathbf{N}^{-1} d_{\\text{atm}}\n}\n\\]\n\n\n\n\nCredit: Amalia Villarrubia Aguilar"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#atmosphere-decontamination-spectral-likelihood-minimization",
    "href": "2024-cmb-france-6/index.html#atmosphere-decontamination-spectral-likelihood-minimization",
    "title": "",
    "section": "Atmosphere decontamination: spectral likelihood minimization",
    "text": "Atmosphere decontamination: spectral likelihood minimization\n\n\n\nSpectral likelihood values in the \\((w_x, w_y)\\) plane for a fixed PWV value. \n\nMinimization is done by brute force: we compute \\(\\langle \\delta \\mathcal{S}_\\text{spec}(w_x, w_y \\mid \\text{pwv}_{\\text{sim}}) \\rangle\\) for 22,500 different combinations of \\((w_x, w_y)\\).\nProof of concept: we can recover the wind parameters!\nFuture work:\n\nmake the likelihood smooth (differentiable) by interpolating the pointing matrix coefficients\nuse a gradient-based minimization algorithm\n\n\n\n\nCredit: Amalia Villarrubia Aguilar"
  },
  {
    "objectID": "2024-cmb-france-6/index.html#conclusion",
    "href": "2024-cmb-france-6/index.html#conclusion",
    "title": "",
    "section": "Conclusion",
    "text": "Conclusion\n\nCMB polarization analysis mixes instrument + foregrounds + cosmology\nNeed for robust and efficient tools\nWe are building a python-based toolbox\n\nusing jax for performance and portability\nable to represent complex instrument models\n\nApplications: map-making, component separation, atmosphere decontamination, etc.\nGoals for early 2025\n\nunbiased map-making + map-based pipeline for SO-SAT\ncluster component separation for LiteBIRD\n\n\nIf you are interested, check out our the repository on GitHub: CMBSciPol/furax.\nThis work is part of the ERC project SciPol (https://scipol.in2p3.fr/)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Slides",
    "section": "",
    "text": "Order By\n      Default\n      \n        Date - Oldest\n      \n      \n        Date - Newest\n      \n      \n        Title\n      \n      \n        Author\n      \n    \n  \n    \n      \n      \n    \n\n\n\n\n\n\nDate\n\n\n\nTitle\n\n\n\nAuthor\n\n\n\n\n\n\n\n\nSep 26, 2025\n\n\nThesis defence\n\n\nSimon Biquard\n\n\n\n\n\n\nDec 19, 2024\n\n\nFURAX: a modular JAX toolbox for solving inverse problems in science\n\n\nSimon Biquard, Pierre Chanial, Wassim Kabalan\n\n\n\n\n\n\nNo matching items"
  }
]